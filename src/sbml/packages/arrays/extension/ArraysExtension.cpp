/**
 * @file:   ArraysExtension.cpp
 * @brief:  Implementation of the ArraysExtension class
 * @author: Generated by autocreate code
 *
 * <!--------------------------------------------------------------------------
 * This file is part of libSBML.  Please visit http://sbml.org for more
 * information about SBML, and the latest version of libSBML.
 *
 * Copyright (C) 2009-2013 jointly by the following organizations:
 *     1. California Institute of Technology, Pasadena, CA, USA
 *     2. EMBL European Bioinformatics Institute (EBML-EBI), Hinxton, UK
 *
 * Copyright (C) 2006-2008 by the California Institute of Technology,
 *     Pasadena, CA, USA 
 *
 * Copyright (C) 2002-2005 jointly by the following organizations:
 *     1. California Institute of Technology, Pasadena, CA, USA
 *     2. Japan Science and Technology Agency, Japan
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation.  A copy of the license agreement is provided
 * in the file named "LICENSE.txt" included with this software distribution
 * and also available online as http://sbml.org/software/libsbml/license.html
 * ------------------------------------------------------------------------ -->
 */


#include <sbml/extension/SBMLExtensionRegister.h>
#include <sbml/extension/SBMLExtensionRegistry.h>
#include <sbml/extension/SBasePluginCreator.h>
#include <sbml/extension/SBMLDocumentPlugin.h>


#include <sbml/packages/arrays/extension/ArraysExtension.h>
#include <sbml/packages/arrays/extension/ArraysASTPlugin.h>
#include <sbml/packages/arrays/extension/ArraysParameterPlugin.h>
#include <sbml/packages/arrays/extension/ArraysCompartmentPlugin.h>
#include <sbml/packages/arrays/extension/ArraysSpeciesPlugin.h>
#include <sbml/packages/arrays/extension/ArraysReactionPlugin.h>
#include <sbml/packages/arrays/extension/ArraysEventPlugin.h>
#include <sbml/packages/arrays/extension/ArraysConstraintPlugin.h>
#include <sbml/packages/arrays/extension/ArraysEventAssignmentPlugin.h>
#include <sbml/packages/arrays/extension/ArraysSpeciesReferencePlugin.h>
#include <sbml/packages/arrays/extension/ArraysRulePlugin.h>
#include <sbml/packages/arrays/extension/ArraysInitialAssignmentPlugin.h>

#ifdef __cplusplus


#include <iostream>


LIBSBML_CPP_NAMESPACE_BEGIN


/*---------------------------------------------------------------
 *
 * This block is global initialization code which should be automatically
 * executed before invoking main() block.
 *
 */

/*------------------ (START) ----------------------------------*/

/*
/* Returns the package name of this extension.
 */
const std::string&
ArraysExtension::getPackageName ()
{
	static const std::string pkgName = "arrays";
	return pkgName;
}


/*
 * Returns the default SBML Level this extension.
 */
unsigned int
ArraysExtension::getDefaultLevel ()
{
	return 3;
}


/*
 * Returns the default SBML Version this extension.
 */
unsigned int
ArraysExtension::getDefaultVersion ()
{
	return 1;
}


/*
 * Returns the default SBML version this extension.
 */
unsigned int
ArraysExtension::getDefaultPackageVersion ()
{
	return 1;
}


/*
 * XML namespaces of package.
 */
const std::string&
ArraysExtension::getXmlnsL3V1V1 ()
{
	static const std::string xmlns = "http://www.sbml.org/sbml/level3/version1/arrays/version1";
	return xmlns;
}


/*
 * Adds this ArraysExtension object to the SBMLExtensionRegistry class.
 * ArraysExtension::init function is automatically invoked when this
 * object is instantiated
 */
static SBMLExtensionRegister<ArraysExtension> arraysExtensionRegistry;


static
const char * SBML_ARRAYS_TYPECODE_STRINGS[] = 
{
	  "Dimension"
	, "Index"
};


/*
 * Instantiate SBMLExtensionNamespaces<ArraysExtension>
 * (ArraysPkgNamespaces) for DLL.
 */
template class LIBSBML_EXTERN  SBMLExtensionNamespaces<ArraysExtension>;


/*------------------ (END) ----------------------------------*/

/*
 * Constructor
 */
ArraysExtension::ArraysExtension()
{
}


/*
 * Copy constructor
 */
ArraysExtension::ArraysExtension(const ArraysExtension& orig) :
 	SBMLExtension(orig)
{
}


/*
 * Assignment operator
 */
ArraysExtension&
ArraysExtension::operator=(const ArraysExtension& rhs)
 {
	if (&rhs != this)
	{
		SBMLExtension::operator=(rhs);
	}
	return *this;
}


/*
 * Clone
 */
ArraysExtension*
ArraysExtension::clone () const
 {
	return new ArraysExtension(*this);
}


/*
 * Destructor
 */
ArraysExtension::~ArraysExtension()
 {
}


/*
 * Returns the name of this package
 */
const std::string&
ArraysExtension::getName() const
{
	return getPackageName();
}


/*
 * Returns the URI (namespace) of the package
 */
const std::string&
ArraysExtension::getURI(unsigned int sbmlLevel,
                                  unsigned int sbmlVersion,
                                  unsigned int pkgVersion) const
{
	if (sbmlLevel == 3)
	{
		if (sbmlVersion == 1)
		{
			if (pkgVersion == 1)
			{
				return getXmlnsL3V1V1();
			}
		}
	}

	static std::string empty = "";

	return empty;
}


/*
 * Returns the SBML level with the given URI of this package.
 */
unsigned int
ArraysExtension::getLevel(const std::string &uri) const
{
	if (uri == getXmlnsL3V1V1())
	{
		return 3;
	}

	return 0;
}


/*
 * Returns the SBML version with the given URI of this package.
 */
unsigned int
ArraysExtension::getVersion(const std::string &uri) const
{
	if (uri == getXmlnsL3V1V1())
	{
		return 1;
	}

	return 0;
}


/*
 * Returns the package version with the given URI of this package.
 */
unsigned int
ArraysExtension::getPackageVersion(const std::string &uri) const
{
	if (uri == getXmlnsL3V1V1())
	{
		return 1;
	}

	return 0;
}


/*
 * Returns an SBMLExtensionNamespaces<ArraysExtension> object 
 */
SBMLNamespaces*
ArraysExtension::getSBMLExtensionNamespaces(const std::string &uri) const
{
	ArraysPkgNamespaces* pkgns = NULL;
	if (uri == getXmlnsL3V1V1())
	{
		pkgns = new ArraysPkgNamespaces(3, 1, 1);
	}

	return pkgns;
}


/*
 * This method takes a type code from the Arrays package and returns a string representing 
 */
const char*
ArraysExtension::getStringFromTypeCode(int typeCode) const
{
	int min = SBML_ARRAYS_DIMENSION;
	int max = SBML_ARRAYS_INDEX;

	if ( typeCode < min || typeCode > max)
	{
		return "(Unknown SBML Arrays Type)";
	}

	return SBML_ARRAYS_TYPECODE_STRINGS[typeCode - min];
}


/*
 * Initialization function of arrays extension module which is automatically invoked
 * by SBMLExtensionRegister class before main() function invoked. 
 */
void
ArraysExtension::init()
{
	//----------------------------------------------------------------
	//
	// 1. Check if the arrays package has already been registered
	//
	//----------------------------------------------------------------

	if (SBMLExtensionRegistry::getInstance().isRegistered(getPackageName()))
	{
		// do nothing
		 return;
	}

	//----------------------------------------------------------------
	//
	// 2. Creates an SBMLExtension derived object
	//
	//----------------------------------------------------------------

	ArraysExtension arraysExtension;

	//----------------------------------------------------------------
	//
	// 3. Creates the SBasePlugins required by this package
	//
	//----------------------------------------------------------------

	std::vector<std::string> packageURIs;
	packageURIs.push_back(getXmlnsL3V1V1());

	SBaseExtensionPoint sbmldocExtPoint("core", SBML_DOCUMENT);
	//SBaseExtensionPoint modelExtPoint("core", SBML_MODEL);
	SBaseExtensionPoint parameterExtPoint("core", SBML_PARAMETER);
	SBaseExtensionPoint compartmentExtPoint("core", SBML_COMPARTMENT);
	SBaseExtensionPoint speciesExtPoint("core", SBML_SPECIES);
	SBaseExtensionPoint reactionExtPoint("core", SBML_REACTION);
	SBaseExtensionPoint eventExtPoint("core", SBML_EVENT);
	SBaseExtensionPoint constraintExtPoint("core", SBML_CONSTRAINT);
	SBaseExtensionPoint eventassignmentExtPoint("core", SBML_EVENT_ASSIGNMENT);
	SBaseExtensionPoint speciesreferenceExtPoint("core", SBML_SPECIES_REFERENCE);
	SBaseExtensionPoint rateRuleExtPoint("core", SBML_RATE_RULE);
	SBaseExtensionPoint assignRuleExtPoint("core", SBML_ASSIGNMENT_RULE);
	SBaseExtensionPoint algRuleExtPoint("core", SBML_ALGEBRAIC_RULE);
	SBaseExtensionPoint initialassignmentExtPoint("core", SBML_INITIAL_ASSIGNMENT);

	SBasePluginCreator<SBMLDocumentPlugin, ArraysExtension> sbmldocPluginCreator(sbmldocExtPoint, packageURIs);
	//SBasePluginCreator<ArraysModelPlugin, ArraysExtension> modelPluginCreator(modelExtPoint, packageURIs);
	SBasePluginCreator<ArraysParameterPlugin, ArraysExtension> parameterPluginCreator(parameterExtPoint, packageURIs);
	SBasePluginCreator<ArraysCompartmentPlugin, ArraysExtension> compartmentPluginCreator(compartmentExtPoint, packageURIs);
	SBasePluginCreator<ArraysSpeciesPlugin, ArraysExtension> speciesPluginCreator(speciesExtPoint, packageURIs);
	SBasePluginCreator<ArraysReactionPlugin, ArraysExtension> reactionPluginCreator(reactionExtPoint, packageURIs);
	SBasePluginCreator<ArraysEventPlugin, ArraysExtension> eventPluginCreator(eventExtPoint, packageURIs);
	SBasePluginCreator<ArraysConstraintPlugin, ArraysExtension> constraintPluginCreator(constraintExtPoint, packageURIs);
	SBasePluginCreator<ArraysEventAssignmentPlugin, ArraysExtension> eventassignmentPluginCreator(eventassignmentExtPoint, packageURIs);
	SBasePluginCreator<ArraysSpeciesReferencePlugin, ArraysExtension> speciesreferencePluginCreator(speciesreferenceExtPoint, packageURIs);
	SBasePluginCreator<ArraysRulePlugin, ArraysExtension> rateRulePluginCreator(rateRuleExtPoint, packageURIs);
	SBasePluginCreator<ArraysRulePlugin, ArraysExtension> assignRulePluginCreator(assignRuleExtPoint, packageURIs);
	SBasePluginCreator<ArraysRulePlugin, ArraysExtension> algRulePluginCreator(algRuleExtPoint, packageURIs);
	SBasePluginCreator<ArraysInitialAssignmentPlugin, ArraysExtension> initialassignmentPluginCreator(initialassignmentExtPoint, packageURIs);

	//----------------------------------------------------------------
	//
	// 4. Adds the creator objects to the extension
	//
	//----------------------------------------------------------------

	arraysExtension.addSBasePluginCreator(&sbmldocPluginCreator);
	//arraysExtension.addSBasePluginCreator(&modelPluginCreator);
	arraysExtension.addSBasePluginCreator(&parameterPluginCreator);
	arraysExtension.addSBasePluginCreator(&compartmentPluginCreator);
	arraysExtension.addSBasePluginCreator(&speciesPluginCreator);
	arraysExtension.addSBasePluginCreator(&reactionPluginCreator);
	arraysExtension.addSBasePluginCreator(&eventPluginCreator);
	arraysExtension.addSBasePluginCreator(&constraintPluginCreator);
	arraysExtension.addSBasePluginCreator(&eventassignmentPluginCreator);
	arraysExtension.addSBasePluginCreator(&speciesreferencePluginCreator);
	arraysExtension.addSBasePluginCreator(&rateRulePluginCreator);
	arraysExtension.addSBasePluginCreator(&assignRulePluginCreator);
	arraysExtension.addSBasePluginCreator(&algRulePluginCreator);
	arraysExtension.addSBasePluginCreator(&initialassignmentPluginCreator);

  //ASTBasePlugin* arraysASTPlugin = new ArraysASTPlugin(getXmlnsL3V1V1(), 
  //  new ArraysPkgNamespaces(3, 1, 1));
  arraysExtension.setASTBasePlugin(new ArraysASTPlugin(getXmlnsL3V1V1()));

	//----------------------------------------------------------------
	//
	// 5. Register the object with the registry
	//
	//----------------------------------------------------------------

	int result = SBMLExtensionRegistry::getInstance().addExtension(&arraysExtension);

	if (result != LIBSBML_OPERATION_SUCCESS)
	{
		std::cerr << "[Error] ArraysExtension::init() failed." << std::endl;
	}
}




LIBSBML_CPP_NAMESPACE_END


#endif /* __cplusplus */


