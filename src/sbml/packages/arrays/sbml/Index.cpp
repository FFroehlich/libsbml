/**
 * @file:   Index.cpp
 * @brief:  Implementation of the Index class
 * @author: Generated by autocreate code
 *
 * <!--------------------------------------------------------------------------
 * This file is part of libSBML.  Please visit http://sbml.org for more
 * information about SBML, and the latest version of libSBML.
 *
 * Copyright (C) 2009-2013 jointly by the following organizations:
 *     1. California Institute of Technology, Pasadena, CA, USA
 *     2. EMBL European Bioinformatics Institute (EBML-EBI), Hinxton, UK
 *
 * Copyright (C) 2006-2008 by the California Institute of Technology,
 *     Pasadena, CA, USA 
 *
 * Copyright (C) 2002-2005 jointly by the following organizations:
 *     1. California Institute of Technology, Pasadena, CA, USA
 *     2. Japan Science and Technology Agency, Japan
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation.  A copy of the license agreement is provided
 * in the file named "LICENSE.txt" included with this software distribution
 * and also available online as http://sbml.org/software/libsbml/license.html
 * ------------------------------------------------------------------------ -->
 */


#include <sbml/packages/arrays/sbml/Index.h>
#include <sbml/math/MathML.h>
#include <sbml/Model.h>
#include <sbml/extension/SBasePlugin.h>
#include <sbml/extension/ASTBasePlugin.h>


using namespace std;


LIBSBML_CPP_NAMESPACE_BEGIN


/*
 * Creates a new Index with the given level, version, and package version.
 */
Index::Index (unsigned int level, unsigned int version, unsigned int pkgVersion)
	: SBase(level, version)
	 ,mMath (NULL)

{
	// set an SBMLNamespaces derived object of this package
	setSBMLNamespacesAndOwn(new ArraysPkgNamespaces(level, version, pkgVersion));

	// connect to child objects
	connectToChild();
}


/*
 * Creates a new Index with the given ArraysPkgNamespaces object.
 */
Index::Index (ArraysPkgNamespaces* arraysns)
	: SBase(arraysns)
	 ,mMath (NULL)

{
	// set the element namespace of this object
	setElementNamespace(arraysns->getURI());

	// load package extensions bound with this object (if any) 
	loadPlugins(arraysns);
}


/*
 * Copy constructor for Index.
 */
Index::Index (const Index& orig)
	: SBase(orig)
{
	if (&orig == NULL)
	{
		throw SBMLConstructorException("Null argument to copy constructor");
	}
	else
	{
		mMath  = orig.mMath;
	}
}


/*
 * Assignment for Index.
 */
Index&
Index::operator=(const Index& rhs)
{
	if (&rhs == NULL)
	{
		throw SBMLConstructorException("Null argument to assignment");
	}
	else if (&rhs != this)
	{
		SBase::operator=(rhs);
		mMath  = rhs.mMath;
	}
	return *this;
}


/*
 * Clone for Index.
 */
Index*
Index::clone () const
{
	return new Index(*this);
}


/*
 * Destructor for Index.
 */
Index::~Index ()
{
}


/*
 * Returns the value of the "math" attribute of this Index.
 */
const NewASTNode*
Index::getMath() const
{
	return mMath;
}


/*
 * Returns true/false if math is set.
 */
bool
Index::isSetMath() const
{
	return (mMath != NULL);
}


/*
 * Sets math and returns value indicating success.
 */
int
Index::setMath(NewASTNode* math)
{
	if (mMath == math)
	{
		return LIBSBML_OPERATION_SUCCESS;
	}
	else if (math == NULL)
	{
		delete mMath;
		mMath = NULL;
		return LIBSBML_OPERATION_SUCCESS;
	}
	//else if (!(math->isWellFormedNewASTNode()))
	//{
	//	return LIBSBML_INVALID_OBJECT;
	//}
	else
	{
		delete mMath;
		mMath = (math != NULL) ?
			math->deepCopy() : NULL;
		if (mMath != NULL)
		{
			//mMath->setParentSBMLObject(this);
		}
		return LIBSBML_OPERATION_SUCCESS;
	}
}


/*
 * Unsets math and returns value indicating success.
 */
int
Index::unsetMath()
{
	delete mMath;
	mMath = NULL;
	return LIBSBML_OPERATION_SUCCESS;
}


/*
 * Returns the XML element name of this object
 */
const std::string&
Index::getElementName () const
{
	static const string name = "index";
	return name;
}


/*
 * Returns the libSBML type code for this SBML object.
 */
int
Index::getTypeCode () const
{
	return SBML_ARRAYS_INDEX;
}


/*
 * check if all the required attributes are set
 */
bool
Index::hasRequiredAttributes () const
{
	bool allPresent = true;

	return allPresent;
}


/*
 * check if all the required elements are set
 */
bool
Index::hasRequiredElements () const
{
	bool allPresent = true;

	if (isSetMath() == false)
		allPresent = false;

	return allPresent;
}


	/** @cond doxygen-libsbml-internal */

/*
 * write contained elements
 */
void
Index::writeElements (XMLOutputStream& stream) const
{
	SBase::writeElements(stream);
	if (isSetMath() == true)
	{
		writeNewMathML(getMath(), stream, getSBMLNamespaces());
	}
	SBase::writeExtensionElements(stream);
}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Accepts the given SBMLVisitor.
 */
bool
Index::accept (SBMLVisitor& v) const
{
	return false;

}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Sets the parent SBMLDocument.
 */
void
Index::setSBMLDocument (SBMLDocument* d)
{
	SBase::setSBMLDocument(d);
}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Enables/Disables the given package with this element.
 */
void
Index::enablePackageInternal(const std::string& pkgURI,
             const std::string& pkgPrefix, bool flag)
{
	SBase::enablePackageInternal(pkgURI, pkgPrefix, flag);
}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Get the list of expected attributes for this element.
 */
void
Index::addExpectedAttributes(ExpectedAttributes& attributes)
{
	SBase::addExpectedAttributes(attributes);

}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Read values from the given XMLAttributes set into their specific fields.
 */
void
Index::readAttributes (const XMLAttributes& attributes,
                             const ExpectedAttributes& expectedAttributes)
{
	SBase::readAttributes(attributes, expectedAttributes);

	bool assigned = false;

}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

bool
Index::readOtherXML (XMLInputStream& stream)
{
	bool          read = false;
	const string& name = stream.peek().getName();

	if (name == "math")
	{
		const XMLToken elem = stream.peek();
		const std::string prefix = checkMathMLNamespace(elem);

		if (stream.getSBMLNamespaces() == NULL)
		{
			stream.setSBMLNamespaces(new SBMLNamespaces(getLevel(), getVersion()));
		}

    delete mMath;
    mMath = readNewMathML(stream, prefix);
		if (mMath != NULL)
		{
			//mMath->setParentSBMLObject(this);
		}
		read = true;
	}

	if (SBase::readOtherXML(stream))
	{
		read = true;
	}
	return read;
}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Write values of XMLAttributes to the output stream.
 */
	void
Index::writeAttributes (XMLOutputStream& stream) const
{
	SBase::writeAttributes(stream);

	SBase::writeExtensionAttributes(stream);

}


	/** @endcond doxygen-libsbml-internal */


/*
 * Constructor 
 */
ListOfIndices::ListOfIndices(unsigned int level, 
	             unsigned int version, 
	             unsigned int pkgVersion)
 : ListOf(level, version)
{
	setSBMLNamespacesAndOwn(new ArraysPkgNamespaces(level, version, pkgVersion)); 
}


/*
 * Constructor 
 */
ListOfIndices::ListOfIndices(ArraysPkgNamespaces* arraysns)
  : ListOf(arraysns)
{
	setElementNamespace(arraysns->getURI());
}


/*
 * Returns a deep copy of this ListOfIndices 
 */
ListOfIndices* 
ListOfIndices::clone () const
 {
	return new ListOfIndices(*this);
}


/*
 * Get a Index from the ListOfIndices by index.
*/
Index*
ListOfIndices::get(unsigned int n)
{
	return static_cast<Index*>(ListOf::get(n));
}


/*
 * Get a Index from the ListOfIndices by index.
 */
const Index*
ListOfIndices::get(unsigned int n) const
{
	return static_cast<const Index*>(ListOf::get(n));
}


/*
 * Get a Index from the ListOfIndices by id.
 */
Index*
ListOfIndices::get(const std::string& sid)
{
	return const_cast<Index*>(
	  static_cast<const ListOfIndices&>(*this).get(sid));
}


/*
 * Get a Index from the ListOfIndices by id.
 */
const Index*
ListOfIndices::get(const std::string& sid) const
{
	vector<SBase*>::const_iterator result;

	result = find_if( mItems.begin(), mItems.end(), IdEq<Index>(sid) );
	return (result == mItems.end()) ? 0 : static_cast <Index*> (*result);
}


/*
 * Removes the nth Index from this ListOfIndices
 */
Index*
ListOfIndices::remove(unsigned int n)
{
	return static_cast<Index*>(ListOf::remove(n));
}


/*
 * Removes the Index from this ListOfIndices with the given identifier
 */
Index*
ListOfIndices::remove(const std::string& sid)
{
	SBase* item = NULL;
	vector<SBase*>::iterator result;

	result = find_if( mItems.begin(), mItems.end(), IdEq<Index>(sid) );

	if (result != mItems.end())
	{
		item = *result;
		mItems.erase(result);
	}

	return static_cast <Index*> (item);
}


/*
 * Returns the XML element name of this object
 */
const std::string&
ListOfIndices::getElementName () const
{
	static const string name = "orderedListOfIndices";
	return name;
}


/*
 * Returns the libSBML type code for this SBML object.
 */
int
ListOfIndices::getTypeCode () const
{
	return SBML_LIST_OF;
}


/*
 * Returns the libSBML type code for the objects in this LIST_OF.
 */
int
ListOfIndices::getItemTypeCode () const
{
	return SBML_ARRAYS_INDEX;
}


	/** @cond doxygen-libsbml-internal */

/*
 * Creates a new Index in this ListOfIndices
 */
SBase*
ListOfIndices::createObject(XMLInputStream& stream)
{
	const std::string& name   = stream.peek().getName();
	SBase* object = NULL;

	if (name == "index")
	{
		ARRAYS_CREATE_NS(arraysns, getSBMLNamespaces());
		object = new Index(arraysns);
		appendAndOwn(object);
	}

	return object;
}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Write the namespace for the Arrays package.
 */
void
ListOfIndices::writeXMLNS(XMLOutputStream& stream) const
{
	XMLNamespaces xmlns;

	std::string prefix = getPrefix();

	if (prefix.empty())
	{
		if (getNamespaces()->hasURI(ArraysExtension::getXmlnsL3V1V1()))
		{
			xmlns.add(ArraysExtension::getXmlnsL3V1V1(),prefix);
		}
	}

	stream << xmlns;
}


	/** @endcond doxygen-libsbml-internal */


/**
 * write comments
 */
LIBSBML_EXTERN
Index_t *
Index_create(unsigned int level, unsigned int version,
             unsigned int pkgVersion)
{
	return new Index(level, version, pkgVersion);
}


/**
 * write comments
 */
LIBSBML_EXTERN
void
Index_free(Index_t * i)
{
	if (i != NULL)
		delete i;
}


/**
 * write comments
 */
LIBSBML_EXTERN
Index_t *
Index_clone(Index_t * i)
{
	if (i != NULL)
	{
		return static_cast<Index_t*>(i->clone());
	}
	else
	{
		return NULL;
	}
}


/**
 * write comments
 */
LIBSBML_EXTERN
int
Index_hasRequiredAttributes(Index_t * i)
{
	return (i != NULL) ? static_cast<int>(i->hasRequiredAttributes()) : 0;
}


/**
 * write comments
 */
LIBSBML_EXTERN
Index_t *
ListOfIndices_getById(ListOf_t * lo, const char * sid)
{
	if (lo == NULL)
		return NULL;

	return (sid != NULL) ? static_cast <ListOfIndices *>(lo)->get(sid) : NULL;
}


/**
 * write comments
 */
LIBSBML_EXTERN
Index_t *
ListOfIndices_removeById(ListOf_t * lo, const char * sid)
{
	if (lo == NULL)
		return NULL;

	return (sid != NULL) ? static_cast <ListOfIndices *>(lo)->remove(sid) : NULL;
}




LIBSBML_CPP_NAMESPACE_END


