/**
 * @file:   DrawFromDistribution.cpp
 * @brief:  Implementation of the DrawFromDistribution class
 * @author: Generated by autocreate code
 *
 * <!--------------------------------------------------------------------------
 * This file is part of libSBML.  Please visit http://sbml.org for more
 * information about SBML, and the latest version of libSBML.
 *
 * Copyright (C) 2009-2013 jointly by the following organizations:
 *     1. California Institute of Technology, Pasadena, CA, USA
 *     2. EMBL European Bioinformatics Institute (EBML-EBI), Hinxton, UK
 *
 * Copyright (C) 2006-2008 by the California Institute of Technology,
 *     Pasadena, CA, USA 
 *
 * Copyright (C) 2002-2005 jointly by the following organizations:
 *     1. California Institute of Technology, Pasadena, CA, USA
 *     2. Japan Science and Technology Agency, Japan
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation.  A copy of the license agreement is provided
 * in the file named "LICENSE.txt" included with this software distribution
 * and also available online as http://sbml.org/software/libsbml/license.html
 * ------------------------------------------------------------------------ -->
 */


#include <sbml/packages/distrib/sbml/DrawFromDistribution.h>


using namespace std;


LIBSBML_CPP_NAMESPACE_BEGIN


/*
 * Creates a new DrawFromDistribution with the given level, version, and package version.
 */
DrawFromDistribution::DrawFromDistribution (unsigned int level, unsigned int version, unsigned int pkgVersion)
	: SBase(level, version)
	 ,mDistribInputs (level, version, pkgVersion)
	 ,mPredefinedPDF (NULL)
	 ,mExplicitPMF (NULL)
	 ,mExplicitPDF (NULL)

{
	// set an SBMLNamespaces derived object of this package
	setSBMLNamespacesAndOwn(new DistribPkgNamespaces(level, version, pkgVersion));

	// connect to child objects
	connectToChild();
}


/*
 * Creates a new DrawFromDistribution with the given DistribPkgNamespaces object.
 */
DrawFromDistribution::DrawFromDistribution (DistribPkgNamespaces* distribns)
	: SBase(distribns)
	 ,mDistribInputs (distribns)
	 ,mPredefinedPDF (NULL)
	 ,mExplicitPMF (NULL)
	 ,mExplicitPDF (NULL)

{
	// set the element namespace of this object
	setElementNamespace(distribns->getURI());

	// connect to child objects
	connectToChild();

	// load package extensions bound with this object (if any) 
	loadPlugins(distribns);
}


/*
 * Copy constructor for DrawFromDistribution.
 */
DrawFromDistribution::DrawFromDistribution (const DrawFromDistribution& orig)
	: SBase(orig)
{
	if (&orig == NULL)
	{
		throw SBMLConstructorException("Null argument to copy constructor");
	}
	else
	{
		mDistribInputs  = orig.mDistribInputs;
		mPredefinedPDF  = orig.mPredefinedPDF;
		mExplicitPMF  = orig.mExplicitPMF;
		mExplicitPDF  = orig.mExplicitPDF;

		// connect to child objects
		connectToChild();
	}
}


/*
 * Assignment for DrawFromDistribution.
 */
DrawFromDistribution&
DrawFromDistribution::operator=(const DrawFromDistribution& rhs)
{
	if (&rhs == NULL)
	{
		throw SBMLConstructorException("Null argument to assignment");
	}
	else if (&rhs != this)
	{
		SBase::operator=(rhs);
		mDistribInputs  = rhs.mDistribInputs;
		mPredefinedPDF  = rhs.mPredefinedPDF;
		mExplicitPMF  = rhs.mExplicitPMF;
		mExplicitPDF  = rhs.mExplicitPDF;

		// connect to child objects
		connectToChild();
	}
	return *this;
}


/*
 * Clone for DrawFromDistribution.
 */
DrawFromDistribution*
DrawFromDistribution::clone () const
{
	return new DrawFromDistribution(*this);
}


/*
 * Destructor for DrawFromDistribution.
 */
DrawFromDistribution::~DrawFromDistribution ()
{
}


/*
 * Returns the value of the "predefinedPDF" attribute of this DrawFromDistribution.
 */
const PredefinedPDF*
DrawFromDistribution::getPredefinedPDF() const
{
	return mPredefinedPDF;
}


/*
 * Returns the value of the "explicitPMF" attribute of this DrawFromDistribution.
 */
const ExplicitPMF*
DrawFromDistribution::getExplicitPMF() const
{
	return mExplicitPMF;
}


/*
 * Returns the value of the "explicitPDF" attribute of this DrawFromDistribution.
 */
const ExplicitPDF*
DrawFromDistribution::getExplicitPDF() const
{
	return mExplicitPDF;
}


/*
 * Returns true/false if predefinedPDF is set.
 */
bool
DrawFromDistribution::isSetPredefinedPDF() const
{
	return (mPredefinedPDF != NULL);
}


/*
 * Returns true/false if explicitPMF is set.
 */
bool
DrawFromDistribution::isSetExplicitPMF() const
{
	return (mExplicitPMF != NULL);
}


/*
 * Returns true/false if explicitPDF is set.
 */
bool
DrawFromDistribution::isSetExplicitPDF() const
{
	return (mExplicitPDF != NULL);
}


/*
 * Sets predefinedPDF and returns value indicating success.
 */
int
DrawFromDistribution::setPredefinedPDF(PredefinedPDF* predefinedPDF)
{
	if (mPredefinedPDF == predefinedPDF)
	{
		return LIBSBML_OPERATION_SUCCESS;
	}
	else if (predefinedPDF == NULL)
	{
		delete mPredefinedPDF;
		mPredefinedPDF = NULL;
		return LIBSBML_OPERATION_SUCCESS;
	}
	else
	{
		delete mPredefinedPDF;
		mPredefinedPDF = (predefinedPDF != NULL) ?
			static_cast<PredefinedPDF*>(predefinedPDF->clone()) : NULL;
		if (mPredefinedPDF != NULL)
		{
			mPredefinedPDF->connectToParent(this);
		}
		return LIBSBML_OPERATION_SUCCESS;
	}
}


/*
 * Sets explicitPMF and returns value indicating success.
 */
int
DrawFromDistribution::setExplicitPMF(ExplicitPMF* explicitPMF)
{
	if (mExplicitPMF == explicitPMF)
	{
		return LIBSBML_OPERATION_SUCCESS;
	}
	else if (explicitPMF == NULL)
	{
		delete mExplicitPMF;
		mExplicitPMF = NULL;
		return LIBSBML_OPERATION_SUCCESS;
	}
	else
	{
		delete mExplicitPMF;
		mExplicitPMF = (explicitPMF != NULL) ?
			static_cast<ExplicitPMF*>(explicitPMF->clone()) : NULL;
		if (mExplicitPMF != NULL)
		{
			mExplicitPMF->connectToParent(this);
		}
		return LIBSBML_OPERATION_SUCCESS;
	}
}


/*
 * Sets explicitPDF and returns value indicating success.
 */
int
DrawFromDistribution::setExplicitPDF(ExplicitPDF* explicitPDF)
{
	if (mExplicitPDF == explicitPDF)
	{
		return LIBSBML_OPERATION_SUCCESS;
	}
	else if (explicitPDF == NULL)
	{
		delete mExplicitPDF;
		mExplicitPDF = NULL;
		return LIBSBML_OPERATION_SUCCESS;
	}
	else
	{
		delete mExplicitPDF;
		mExplicitPDF = (explicitPDF != NULL) ?
			static_cast<ExplicitPDF*>(explicitPDF->clone()) : NULL;
		if (mExplicitPDF != NULL)
		{
			mExplicitPDF->connectToParent(this);
		}
		return LIBSBML_OPERATION_SUCCESS;
	}
}


/*
 * Unsets predefinedPDF and returns value indicating success.
 */
int
DrawFromDistribution::unsetPredefinedPDF()
{
	delete mPredefinedPDF;
	mPredefinedPDF = NULL;
	return LIBSBML_OPERATION_SUCCESS;
}


/*
 * Unsets explicitPMF and returns value indicating success.
 */
int
DrawFromDistribution::unsetExplicitPMF()
{
	delete mExplicitPMF;
	mExplicitPMF = NULL;
	return LIBSBML_OPERATION_SUCCESS;
}


/*
 * Unsets explicitPDF and returns value indicating success.
 */
int
DrawFromDistribution::unsetExplicitPDF()
{
	delete mExplicitPDF;
	mExplicitPDF = NULL;
	return LIBSBML_OPERATION_SUCCESS;
}


/*
 * Returns the  "ListOfDistribInputs" in this DrawFromDistribution object.
 */
const ListOfDistribInputs*
DrawFromDistribution::getListOfDistribInputs() const
{
	return &mDistribInputs;
}


/*
 * Returns the  "ListOfDistribInputs" in this DrawFromDistribution object.
 */
ListOfDistribInputs*
DrawFromDistribution::getListOfDistribInputs()
{
	return &mDistribInputs;
}


/*
 * Removes the nth DistribInput from the ListOfDistribInputs.
 */
DistribInput*
DrawFromDistribution::removeDistribInput(unsigned int n)
{
	return mDistribInputs.remove(n);
}


/*
 * Removes the a DistribInput with given id from the ListOfDistribInputs.
 */
DistribInput*
DrawFromDistribution::removeDistribInput(const std::string& sid)
{
	return mDistribInputs.remove(sid);
}


/*
 * Return the nth DistribInput in the ListOfDistribInputs within this DrawFromDistribution.
 */
DistribInput*
DrawFromDistribution::getDistribInput(unsigned int n)
{
	return mDistribInputs.get(n);
}


/*
 * Return the nth DistribInput in the ListOfDistribInputs within this DrawFromDistribution.
 */
const DistribInput*
DrawFromDistribution::getDistribInput(unsigned int n) const
{
	return mDistribInputs.get(n);
}


/*
 * Return a DistribInput from the ListOfDistribInputs by id.
 */
DistribInput*
DrawFromDistribution::getDistribInput(const std::string& sid)
{
	return mDistribInputs.get(sid);
}


/*
 * Return a DistribInput from the ListOfDistribInputs by id.
 */
const DistribInput*
DrawFromDistribution::getDistribInput(const std::string& sid) const
{
	return mDistribInputs.get(sid);
}


/*
 * Adds a copy the given "DistribInput" to this DrawFromDistribution.
 */
int
DrawFromDistribution::addDistribInput(const DistribInput* i)
{
	if (i == NULL)
	{
		return LIBSBML_OPERATION_FAILED;
	}
	else if (i->hasRequiredAttributes() == false)
	{
		return LIBSBML_INVALID_OBJECT;
	}
	else if (getLevel() != i->getLevel())
	{
		return LIBSBML_LEVEL_MISMATCH;
	}
	else if (getVersion() != i->getVersion())
	{
		return LIBSBML_VERSION_MISMATCH;
	}
	else if (matchesRequiredSBMLNamespacesForAddition(static_cast<const SBase *>(i)) == false)
	{
		return LIBSBML_NAMESPACES_MISMATCH;
	}
	else
	{
		mDistribInputs.append(i);

		return LIBSBML_OPERATION_SUCCESS;
	}
}


/*
 * Get the number of DistribInput objects in this DrawFromDistribution.
 */
unsigned int
DrawFromDistribution::getNumDistribInputs() const
{
	return mDistribInputs.size();
}


/*
 * Creates a new DistribInput object, adds it to this DrawFromDistributions
 */
DistribInput*
DrawFromDistribution::createDistribInput()
{
	DistribInput* i = NULL;

	try
	{
		DISTRIB_CREATE_NS(distribns, getSBMLNamespaces());
		i = new DistribInput(distribns);
	}
	catch (...)
	{
		/* here we do not create a default object as the level/version must
		 * match the parent object
		 *
		 * do nothing
		 */
	}

	if(i != NULL)
	{
		mDistribInputs.appendAndOwn(i);
	}

	return i;
}


/*
 * Returns the XML element name of this object
 */
const std::string&
DrawFromDistribution::getElementName () const
{
	static const string name = "drawFromDistribution";
	return name;
}


/*
 * Returns the libSBML type code for this SBML object.
 */
int
DrawFromDistribution::getTypeCode () const
{
	return SBML_DISTRIB_DRAW_FROM_DISTRIBUTION;
}


/*
 * check if all the required attributes are set
 */
bool
DrawFromDistribution::hasRequiredAttributes () const
{
	bool allPresent = true;

	return allPresent;
}


/*
 * check if all the required elements are set
 */
bool
DrawFromDistribution::hasRequiredElements () const
{
	bool allPresent = true;

	return allPresent;
}


	/** @cond doxygen-libsbml-internal */

/*
 * write contained elements
 */
void
DrawFromDistribution::writeElements (XMLOutputStream& stream) const
{
	SBase::writeElements(stream);
	if (getNumDistribInputs() > 0)
	{
		mDistribInputs.write(stream);
	}

	if (isSetPredefinedPDF() == true)
	{
		;
	}
	if (isSetExplicitPMF() == true)
	{
		;
	}
	if (isSetExplicitPDF() == true)
	{
		;
	}
	SBase::writeExtensionElements(stream);
}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Accepts the given SBMLVisitor.
 */
bool
DrawFromDistribution::accept (SBMLVisitor& v) const
{
	return false;

}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Sets the parent SBMLDocument.
 */
void
DrawFromDistribution::setSBMLDocument (SBMLDocument* d)
{
	SBase::setSBMLDocument(d);
	mDistribInputs.setSBMLDocument(d);
}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
	 * Connects to child elements.
 */
void
DrawFromDistribution::connectToChild()
{
	mDistribInputs.connectToParent(this);
}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Enables/Disables the given package with this element.
 */
void
DrawFromDistribution::enablePackageInternal(const std::string& pkgURI,
             const std::string& pkgPrefix, bool flag)
{
	SBase::enablePackageInternal(pkgURI, pkgPrefix, flag);
	mDistribInputs.enablePackageInternal(pkgURI, pkgPrefix, flag);
}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * creates object.
 */
SBase*
DrawFromDistribution::createObject(XMLInputStream& stream)
{
	const string& name = stream.peek().getName();
	SBase* object = NULL;
  
  DISTRIB_CREATE_NS(distribns, getSBMLNamespaces());

	if (name == "listOfDistribInputs")
	{
		object = &mDistribInputs;
	}
	else if (name == "predefinedPDF")
	{
    mPredefinedPDF = new PredefinedPDF(distribns);

    object      = mPredefinedPDF;
	}
	else if (name == "explicitPMF")
	{
    mExplicitPMF = new ExplicitPMF(distribns);

    object      = mExplicitPMF;
	}
	else if (name == "explicitPDF")
	{
    mExplicitPDF = new ExplicitPDF(distribns);

    object      = mExplicitPDF;
	}

	return object;
}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Get the list of expected attributes for this element.
 */
void
DrawFromDistribution::addExpectedAttributes(ExpectedAttributes& attributes)
{
	SBase::addExpectedAttributes(attributes);

}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Read values from the given XMLAttributes set into their specific fields.
 */
void
DrawFromDistribution::readAttributes (const XMLAttributes& attributes,
                             const ExpectedAttributes& expectedAttributes)
{
	SBase::readAttributes(attributes, expectedAttributes);

	bool assigned = false;

}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Write values of XMLAttributes to the output stream.
 */
	void
DrawFromDistribution::writeAttributes (XMLOutputStream& stream) const
{
	SBase::writeAttributes(stream);

	SBase::writeExtensionAttributes(stream);

}


	/** @endcond doxygen-libsbml-internal */


/**
 * write comments
 */
LIBSBML_EXTERN
DrawFromDistribution_t *
DrawFromDistribution_create(unsigned int level, unsigned int version,
                            unsigned int pkgVersion)
{
	return new DrawFromDistribution(level, version, pkgVersion);
}


/**
 * write comments
 */
LIBSBML_EXTERN
void
DrawFromDistribution_free(DrawFromDistribution_t * dfd)
{
	if (dfd != NULL)
		delete dfd;
}


/**
 * write comments
 */
LIBSBML_EXTERN
DrawFromDistribution_t *
DrawFromDistribution_clone(DrawFromDistribution_t * dfd)
{
	if (dfd != NULL)
	{
		return static_cast<DrawFromDistribution_t*>(dfd->clone());
	}
	else
	{
		return NULL;
	}
}


/**
 * write comments
 */
LIBSBML_EXTERN
int
DrawFromDistribution_hasRequiredAttributes(DrawFromDistribution_t * dfd)
{
	return (dfd != NULL) ? static_cast<int>(dfd->hasRequiredAttributes()) : 0;
}




LIBSBML_CPP_NAMESPACE_END


