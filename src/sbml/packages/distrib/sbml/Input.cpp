/**
 * @file:   DistribInput.cpp
 * @brief:  Implementation of the DistribInput class
 * @author: Generated by autocreate code
 *
 * <!--------------------------------------------------------------------------
 * This file is part of libSBML.  Please visit http://sbml.org for more
 * information about SBML, and the latest version of libSBML.
 *
 * Copyright (C) 2009-2013 jointly by the following organizations:
 *     1. California Institute of Technology, Pasadena, CA, USA
 *     2. EMBL European Bioinformatics Institute (EBML-EBI), Hinxton, UK
 *
 * Copyright (C) 2006-2008 by the California Institute of Technology,
 *     Pasadena, CA, USA 
 *
 * Copyright (C) 2002-2005 jointly by the following organizations:
 *     1. California Institute of Technology, Pasadena, CA, USA
 *     2. Japan Science and Technology Agency, Japan
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation.  A copy of the license agreement is provided
 * in the file named "LICENSE.txt" included with this software distribution
 * and also available online as http://sbml.org/software/libsbml/license.html
 * ------------------------------------------------------------------------ -->
 */


#include <sbml/packages/distrib/sbml/Input.h>


using namespace std;


LIBSBML_CPP_NAMESPACE_BEGIN


/*
 * Creates a new DistribInput with the given level, version, and package version.
 */
DistribInput::DistribInput (unsigned int level, unsigned int version, unsigned int pkgVersion)
	: SBase(level, version)

{
	// set an SBMLNamespaces derived object of this package
	setSBMLNamespacesAndOwn(new DistribPkgNamespaces(level, version, pkgVersion));

	// connect to child objects
	connectToChild();
}


/*
 * Creates a new DistribInput with the given DistribPkgNamespaces object.
 */
DistribInput::DistribInput (DistribPkgNamespaces* distribns)
	: SBase(distribns)

{
	// set the element namespace of this object
	setElementNamespace(distribns->getURI());

	// connect to child objects
	connectToChild();

	// load package extensions bound with this object (if any) 
	loadPlugins(distribns);
}


/*
 * Copy constructor for DistribInput.
 */
DistribInput::DistribInput (const DistribInput& orig)
	: SBase(orig)
{
	if (&orig == NULL)
	{
		throw SBMLConstructorException("Null argument to copy constructor");
	}
	else
	{

		// connect to child objects
		connectToChild();
	}
}


/*
 * Assignment for DistribInput.
 */
DistribInput&
DistribInput::operator=(const DistribInput& rhs)
{
	if (&rhs == NULL)
	{
		throw SBMLConstructorException("Null argument to assignment");
	}
	else if (&rhs != this)
	{
		SBase::operator=(rhs);

		// connect to child objects
		connectToChild();
	}
	return *this;
}


/*
 * Clone for DistribInput.
 */
DistribInput*
DistribInput::clone () const
{
	return new DistribInput(*this);
}


/*
 * Destructor for DistribInput.
 */
DistribInput::~DistribInput ()
{
}


/*
 * Returns the XML element name of this object
 */
const std::string&
DistribInput::getElementName () const
{
	static const string name = "input";
	return name;
}


/*
 * Returns the libSBML type code for this SBML object.
 */
int
DistribInput::getTypeCode () const
{
	return SBML_DISTRIB_INPUT;
}


/*
 * check if all the required attributes are set
 */
bool
DistribInput::hasRequiredAttributes () const
{
	bool allPresent = true;

	return allPresent;
}


/*
 * check if all the required elements are set
 */
bool
DistribInput::hasRequiredElements () const
{
	bool allPresent = true;

	return allPresent;
}


	/** @cond doxygen-libsbml-internal */

/*
 * write contained elements
 */
void
DistribInput::writeElements (XMLOutputStream& stream) const
{
	SBase::writeElements(stream);
	SBase::writeExtensionElements(stream);
}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Accepts the given SBMLVisitor.
 */
bool
DistribInput::accept (SBMLVisitor& v) const
{
	return false;

}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Sets the parent SBMLDocument.
 */
void
DistribInput::setSBMLDocument (SBMLDocument* d)
{
	SBase::setSBMLDocument(d);
}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
	 * Connects to child elements.
 */
void
DistribInput::connectToChild()
{
}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Enables/Disables the given package with this element.
 */
void
DistribInput::enablePackageInternal(const std::string& pkgURI,
             const std::string& pkgPrefix, bool flag)
{
	SBase::enablePackageInternal(pkgURI, pkgPrefix, flag);
}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * creates object.
 */
SBase*
DistribInput::createObject(XMLInputStream& stream)
{
	const string& name = stream.peek().getName();
	SBase* object = NULL;


	return object;
}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Get the list of expected attributes for this element.
 */
void
DistribInput::addExpectedAttributes(ExpectedAttributes& attributes)
{
	SBase::addExpectedAttributes(attributes);

}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Read values from the given XMLAttributes set into their specific fields.
 */
void
DistribInput::readAttributes (const XMLAttributes& attributes,
                             const ExpectedAttributes& expectedAttributes)
{
	SBase::readAttributes(attributes, expectedAttributes);

	bool assigned = false;

}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Write values of XMLAttributes to the output stream.
 */
	void
DistribInput::writeAttributes (XMLOutputStream& stream) const
{
	SBase::writeAttributes(stream);

	SBase::writeExtensionAttributes(stream);

}


	/** @endcond doxygen-libsbml-internal */


/*
 * Constructor 
 */
ListOfDistribInputs::ListOfDistribInputs(unsigned int level, 
	             unsigned int version, 
	             unsigned int pkgVersion)
 : ListOf(level, version)
{
	setSBMLNamespacesAndOwn(new DistribPkgNamespaces(level, version, pkgVersion)); 
}


/*
 * Constructor 
 */
ListOfDistribInputs::ListOfDistribInputs(DistribPkgNamespaces* distribns)
  : ListOf(distribns)
{
	setElementNamespace(distribns->getURI());
}


/*
 * Returns a deep copy of this ListOfDistribInputs 
 */
ListOfDistribInputs* 
ListOfDistribInputs::clone () const
 {
	return new ListOfDistribInputs(*this);
}


/*
 * Get a DistribInput from the ListOfDistribInputs by index.
*/
DistribInput*
ListOfDistribInputs::get(unsigned int n)
{
	return static_cast<DistribInput*>(ListOf::get(n));
}


/*
 * Get a DistribInput from the ListOfDistribInputs by index.
 */
const DistribInput*
ListOfDistribInputs::get(unsigned int n) const
{
	return static_cast<const DistribInput*>(ListOf::get(n));
}


/*
 * Get a DistribInput from the ListOfDistribInputs by id.
 */
DistribInput*
ListOfDistribInputs::get(const std::string& sid)
{
	return const_cast<DistribInput*>(
	  static_cast<const ListOfDistribInputs&>(*this).get(sid));
}


/*
 * Get a DistribInput from the ListOfDistribInputs by id.
 */
const DistribInput*
ListOfDistribInputs::get(const std::string& sid) const
{
	vector<SBase*>::const_iterator result;

	result = find_if( mItems.begin(), mItems.end(), IdEq<DistribInput>(sid) );
	return (result == mItems.end()) ? 0 : static_cast <DistribInput*> (*result);
}


/*
 * Removes the nth DistribInput from this ListOfDistribInputs
 */
DistribInput*
ListOfDistribInputs::remove(unsigned int n)
{
	return static_cast<DistribInput*>(ListOf::remove(n));
}


/*
 * Removes the DistribInput from this ListOfDistribInputs with the given identifier
 */
DistribInput*
ListOfDistribInputs::remove(const std::string& sid)
{
	SBase* item = NULL;
	vector<SBase*>::iterator result;

	result = find_if( mItems.begin(), mItems.end(), IdEq<DistribInput>(sid) );

	if (result != mItems.end())
	{
		item = *result;
		mItems.erase(result);
	}

	return static_cast <DistribInput*> (item);
}


/*
 * Returns the XML element name of this object
 */
const std::string&
ListOfDistribInputs::getElementName () const
{
	static const string name = "listOfDistribInputs";
	return name;
}


/*
 * Returns the libSBML type code for this SBML object.
 */
int
ListOfDistribInputs::getTypeCode () const
{
	return SBML_LIST_OF;
}


/*
 * Returns the libSBML type code for the objects in this LIST_OF.
 */
int
ListOfDistribInputs::getItemTypeCode () const
{
	return SBML_DISTRIB_INPUT;
}


	/** @cond doxygen-libsbml-internal */

/*
 * Creates a new DistribInput in this ListOfDistribInputs
 */
SBase*
ListOfDistribInputs::createObject(XMLInputStream& stream)
{
	const std::string& name   = stream.peek().getName();
	SBase* object = NULL;

	if (name == "input")
	{
		DISTRIB_CREATE_NS(distribns, getSBMLNamespaces());
		object = new DistribInput(distribns);
		appendAndOwn(object);
	}

	return object;
}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Write the namespace for the Distrib package.
 */
void
ListOfDistribInputs::writeXMLNS(XMLOutputStream& stream) const
{
	XMLNamespaces xmlns;

	std::string prefix = getPrefix();

	if (prefix.empty())
	{
		if (getNamespaces()->hasURI(DistribExtension::getXmlnsL3V1V1()))
		{
			xmlns.add(DistribExtension::getXmlnsL3V1V1(),prefix);
		}
	}

	stream << xmlns;
}


	/** @endcond doxygen-libsbml-internal */


/**
 * write comments
 */
LIBSBML_EXTERN
DistribInput_t *
DistribInput_create(unsigned int level, unsigned int version,
             unsigned int pkgVersion)
{
	return new DistribInput(level, version, pkgVersion);
}


/**
 * write comments
 */
LIBSBML_EXTERN
void
DistribInput_free(DistribInput_t * i)
{
	if (i != NULL)
		delete i;
}


/**
 * write comments
 */
LIBSBML_EXTERN
DistribInput_t *
DistribInput_clone(DistribInput_t * i)
{
	if (i != NULL)
	{
		return static_cast<DistribInput_t*>(i->clone());
	}
	else
	{
		return NULL;
	}
}


/**
 * write comments
 */
LIBSBML_EXTERN
int
DistribInput_hasRequiredAttributes(DistribInput_t * i)
{
	return (i != NULL) ? static_cast<int>(i->hasRequiredAttributes()) : 0;
}


/**
 * write comments
 */
LIBSBML_EXTERN
DistribInput_t *
ListOfDistribInputs_getById(ListOf_t * lo, const char * sid)
{
	if (lo == NULL)
		return NULL;

	return (sid != NULL) ? static_cast <ListOfDistribInputs *>(lo)->get(sid) : NULL;
}


/**
 * write comments
 */
LIBSBML_EXTERN
DistribInput_t *
ListOfDistribInputs_removeById(ListOf_t * lo, const char * sid)
{
	if (lo == NULL)
		return NULL;

	return (sid != NULL) ? static_cast <ListOfDistribInputs *>(lo)->remove(sid) : NULL;
}




LIBSBML_CPP_NAMESPACE_END


