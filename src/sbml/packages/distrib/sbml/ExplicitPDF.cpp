/**
 * @file:   ExplicitPDF.cpp
 * @brief:  Implementation of the ExplicitPDF class
 * @author: Generated by autocreate code
 *
 * <!--------------------------------------------------------------------------
 * This file is part of libSBML.  Please visit http://sbml.org for more
 * information about SBML, and the latest version of libSBML.
 *
 * Copyright (C) 2009-2013 jointly by the following organizations:
 *     1. California Institute of Technology, Pasadena, CA, USA
 *     2. EMBL European Bioinformatics Institute (EBML-EBI), Hinxton, UK
 *
 * Copyright (C) 2006-2008 by the California Institute of Technology,
 *     Pasadena, CA, USA 
 *
 * Copyright (C) 2002-2005 jointly by the following organizations:
 *     1. California Institute of Technology, Pasadena, CA, USA
 *     2. Japan Science and Technology Agency, Japan
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation.  A copy of the license agreement is provided
 * in the file named "LICENSE.txt" included with this software distribution
 * and also available online as http://sbml.org/software/libsbml/license.html
 * ------------------------------------------------------------------------ -->
 */


#include <sbml/packages/distrib/sbml/ExplicitPDF.h>
#include <sbml/math/MathML.h>


using namespace std;


LIBSBML_CPP_NAMESPACE_BEGIN


/*
 * Creates a new ExplicitPDF with the given level, version, and package version.
 */
ExplicitPDF::ExplicitPDF (unsigned int level, unsigned int version, unsigned int pkgVersion)
	: SBase(level, version)
	 ,mMath (NULL)

{
	// set an SBMLNamespaces derived object of this package
	setSBMLNamespacesAndOwn(new DistribPkgNamespaces(level, version, pkgVersion));

	// connect to child objects
	connectToChild();
}


/*
 * Creates a new ExplicitPDF with the given DistribPkgNamespaces object.
 */
ExplicitPDF::ExplicitPDF (DistribPkgNamespaces* distribns)
	: SBase(distribns)
	 ,mMath (NULL)

{
	// set the element namespace of this object
	setElementNamespace(distribns->getURI());

	// load package extensions bound with this object (if any) 
	loadPlugins(distribns);
}


/*
 * Copy constructor for ExplicitPDF.
 */
ExplicitPDF::ExplicitPDF (const ExplicitPDF& orig)
	: SBase(orig)
{
	if (&orig == NULL)
	{
		throw SBMLConstructorException("Null argument to copy constructor");
	}
	else
	{
		mMath  = orig.mMath;
	}
}


/*
 * Assignment for ExplicitPDF.
 */
ExplicitPDF&
ExplicitPDF::operator=(const ExplicitPDF& rhs)
{
	if (&rhs == NULL)
	{
		throw SBMLConstructorException("Null argument to assignment");
	}
	else if (&rhs != this)
	{
		SBase::operator=(rhs);
		mMath  = rhs.mMath;
	}
	return *this;
}


/*
 * Clone for ExplicitPDF.
 */
ExplicitPDF*
ExplicitPDF::clone () const
{
	return new ExplicitPDF(*this);
}


/*
 * Destructor for ExplicitPDF.
 */
ExplicitPDF::~ExplicitPDF ()
{
}


/*
 * Returns the value of the "math" attribute of this ExplicitPDF.
 */
const ASTNode*
ExplicitPDF::getMath() const
{
	return mMath;
}


/*
 * Returns true/false if math is set.
 */
bool
ExplicitPDF::isSetMath() const
{
	return (mMath != NULL);
}


/*
 * Sets math and returns value indicating success.
 */
int
ExplicitPDF::setMath(ASTNode* math)
{
	if (mMath == math)
	{
		return LIBSBML_OPERATION_SUCCESS;
	}
	else if (math == NULL)
	{
		delete mMath;
		mMath = NULL;
		return LIBSBML_OPERATION_SUCCESS;
	}
	else if (!(math->isWellFormedASTNode()))
	{
		return LIBSBML_INVALID_OBJECT;
	}
	else
	{
		delete mMath;
		mMath = (math != NULL) ?
			math->deepCopy() : NULL;
		if (mMath != NULL)
		{
			mMath->setParentSBMLObject(this);
		}
		return LIBSBML_OPERATION_SUCCESS;
	}
}


/*
 * Unsets math and returns value indicating success.
 */
int
ExplicitPDF::unsetMath()
{
	delete mMath;
	mMath = NULL;
	return LIBSBML_OPERATION_SUCCESS;
}


/*
 * Returns the XML element name of this object
 */
const std::string&
ExplicitPDF::getElementName () const
{
	static const string name = "explicitPDF";
	return name;
}


/*
 * Returns the libSBML type code for this SBML object.
 */
int
ExplicitPDF::getTypeCode () const
{
	return SBML_DISTRIB_EXPLICT_PDF;
}


/*
 * check if all the required attributes are set
 */
bool
ExplicitPDF::hasRequiredAttributes () const
{
	bool allPresent = true;

	return allPresent;
}


/*
 * check if all the required elements are set
 */
bool
ExplicitPDF::hasRequiredElements () const
{
	bool allPresent = true;

	if (isSetMath() == false)
		allPresent = false;

	return allPresent;
}


	/** @cond doxygen-libsbml-internal */

/*
 * write contained elements
 */
void
ExplicitPDF::writeElements (XMLOutputStream& stream) const
{
	SBase::writeElements(stream);
	if (isSetMath() == true)
	{
		writeMathML(getMath(), stream, getSBMLNamespaces());
	}
	SBase::writeExtensionElements(stream);
}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Accepts the given SBMLVisitor.
 */
bool
ExplicitPDF::accept (SBMLVisitor& v) const
{
	return false;

}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Sets the parent SBMLDocument.
 */
void
ExplicitPDF::setSBMLDocument (SBMLDocument* d)
{
	SBase::setSBMLDocument(d);
}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
	 * Connects to child elements.
 */
//void
//ExplicitPDF::connectToChild()
//{
//}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Enables/Disables the given package with this element.
 */
void
ExplicitPDF::enablePackageInternal(const std::string& pkgURI,
             const std::string& pkgPrefix, bool flag)
{
	SBase::enablePackageInternal(pkgURI, pkgPrefix, flag);
}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Get the list of expected attributes for this element.
 */
void
ExplicitPDF::addExpectedAttributes(ExpectedAttributes& attributes)
{
	SBase::addExpectedAttributes(attributes);

}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Read values from the given XMLAttributes set into their specific fields.
 */
void
ExplicitPDF::readAttributes (const XMLAttributes& attributes,
                             const ExpectedAttributes& expectedAttributes)
{
	SBase::readAttributes(attributes, expectedAttributes);

	bool assigned = false;

}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

bool
ExplicitPDF::readOtherXML (XMLInputStream& stream)
{
	bool          read = false;
	const string& name = stream.peek().getName();

	if (name == "math")
	{
		const XMLToken elem = stream.peek();
		const std::string prefix = checkMathMLNamespace(elem);

		if (stream.getSBMLNamespaces() == NULL)
		{
			stream.setSBMLNamespaces(new SBMLNamespaces(getLevel(), getVersion()));
		}

		delete mMath;
		mMath = readMathML(stream, prefix);
		if (mMath != NULL)
		{
			mMath->setParentSBMLObject(this);
		}
		read = true;
	}

	if (SBase::readOtherXML(stream))
	{
		read = true;
	}
	return read;
}


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

/*
 * Write values of XMLAttributes to the output stream.
 */
	void
ExplicitPDF::writeAttributes (XMLOutputStream& stream) const
{
	SBase::writeAttributes(stream);

	SBase::writeExtensionAttributes(stream);

}


	/** @endcond doxygen-libsbml-internal */




/**
 * write comments
 */
LIBSBML_EXTERN
ExplicitPDF_t *
ExplicitPDF_create(unsigned int level, unsigned int version,
                   unsigned int pkgVersion)
{
	return new ExplicitPDF(level, version, pkgVersion);
}


/**
 * write comments
 */
LIBSBML_EXTERN
void
ExplicitPDF_free(ExplicitPDF_t * epdf)
{
	if (epdf != NULL)
		delete epdf;
}


/**
 * write comments
 */
LIBSBML_EXTERN
ExplicitPDF_t *
ExplicitPDF_clone(ExplicitPDF_t * epdf)
{
	if (epdf != NULL)
	{
		return static_cast<ExplicitPDF_t*>(epdf->clone());
	}
	else
	{
		return NULL;
	}
}


/**
 * write comments
 */
LIBSBML_EXTERN
int
ExplicitPDF_hasRequiredAttributes(ExplicitPDF_t * epdf)
{
	return (epdf != NULL) ? static_cast<int>(epdf->hasRequiredAttributes()) : 0;
}




LIBSBML_CPP_NAMESPACE_END


