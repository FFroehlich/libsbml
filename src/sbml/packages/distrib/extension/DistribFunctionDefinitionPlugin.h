/**
 * @file:   DistribFunctionDefinitionPlugin.h
 * @brief:  Implementation of the DistribFunctionDefinitionPlugin class
 * @author: Generated by autocreate code
 *
 * <!--------------------------------------------------------------------------
 * This file is part of libSBML.  Please visit http://sbml.org for more
 * information about SBML, and the latest version of libSBML.
 *
 * Copyright (C) 2009-2013 jointly by the following organizations:
 *     1. California Institute of Technology, Pasadena, CA, USA
 *     2. EMBL European Bioinformatics Institute (EBML-EBI), Hinxton, UK
 *
 * Copyright (C) 2006-2008 by the California Institute of Technology,
 *     Pasadena, CA, USA 
 *
 * Copyright (C) 2002-2005 jointly by the following organizations:
 *     1. California Institute of Technology, Pasadena, CA, USA
 *     2. Japan Science and Technology Agency, Japan
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation.  A copy of the license agreement is provided
 * in the file named "LICENSE.txt" included with this software distribution
 * and also available online as http://sbml.org/software/libsbml/license.html
 * ------------------------------------------------------------------------ -->
 */


#ifndef DistribFunctionDefinitionPlugin_H__
#define DistribFunctionDefinitionPlugin_H__


#include <sbml/common/extern.h>


#ifdef __cplusplus


#include <sbml/extension/SBasePlugin.h>
#include <sbml/packages/distrib/sbml/DrawFromDistribution.h>


LIBSBML_CPP_NAMESPACE_BEGIN


class LIBSBML_EXTERN DistribFunctionDefinitionPlugin : public SBasePlugin
{
public:

	/**
	 * Creates a new DistribFunctionDefinitionPlugin
	 */
	DistribFunctionDefinitionPlugin(const std::string& uri, const std::string& prefix, 
	                               DistribPkgNamespaces* distribns);


	/**
	 * Copy constructor for DistribFunctionDefinitionPlugin.
	 *
	 * @param orig; the DistribFunctionDefinitionPlugin instance to copy.
	 */
	DistribFunctionDefinitionPlugin(const DistribFunctionDefinitionPlugin& orig);


 	/**
	 * Assignment operator for DistribFunctionDefinitionPlugin.
	 *
	 * @param rhs; the object whose values are used as the basis
	 * of the assignment
	 */
	DistribFunctionDefinitionPlugin& operator=(const DistribFunctionDefinitionPlugin& rhs);


 	/**
	 * Creates and returns a deep copy of this DistribFunctionDefinitionPlugin object.
	 *
	 * @return a (deep) copy of this DistribFunctionDefinitionPlugin object.
	 */
	virtual DistribFunctionDefinitionPlugin* clone () const;


 	/**
	 * Destructor for DistribFunctionDefinitionPlugin.
	 */
	virtual ~DistribFunctionDefinitionPlugin();


 	//---------------------------------------------------------------
	//
	// overridden virtual functions for read/write/check
	//
	//---------------------------------------------------------------

	/** @cond doxygen-libsbml-internal */

	/**
	 * Subclasses must override this method to create, store, and then
	 * return an SBML object corresponding to the next XMLToken in the
	 * XMLInputStream if they have their specific elements.
	 *
	 * @return the SBML object corresponding to next XMLToken in the
	 * XMLInputStream or NULL if the token was not recognized.
	 */
	virtual SBase* createObject (XMLInputStream& stream);


	/** @endcond doxygen-libsbml-internal */


	/** @cond doxygen-libsbml-internal */

	/**
	 * Subclasses must override this method to write out their contained
	 * SBML objects as XML elements if they have their specific elements.
	 */
	virtual void writeElements (XMLOutputStream& stream) const;


	/** @endcond doxygen-libsbml-internal */


	/**
	 * Checks if this plugin object has all the required elements.
	 *
	 * Subclasses must override this method 
	 * if they have their specific elements.
	 *
	 * @return true if this plugin object has all the required elements
	 * otherwise false will be returned.
	 */
	virtual bool hasRequiredElements () const;


	//---------------------------------------------------------------


	//---------------------------------------------------------------
	//
	// Functions for interacting with the members of the plugin
	//
	//---------------------------------------------------------------

	/** @cond doxygen-libsbml-internal */

	/**
	 * Sets the parent SBMLDocument.
	 */
	virtual void setSBMLDocument (SBMLDocument* d);


	/** @endcond doxygen-libsbml-internal */


	virtual void connectToParent (SBase* sbase);


	virtual void enablePackageInternal(const std::string& pkgURI,
	                                   const std::string& pkgPrefix, bool flag);


protected:

	/** @cond doxygen-libsbml-internal */

	DrawFromDistribution * mDrawFromDistribution;

	/** @endcond doxygen-libsbml-internal */


};




LIBSBML_CPP_NAMESPACE_END


#endif /* __cplusplus */
#endif /* DistribFunctionDefinitionPlugin_H__ */


